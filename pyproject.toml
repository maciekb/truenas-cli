[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "truenas-client"
version = "0.1.0"
description = "TrueNAS API Client using WebSocket and JSON-RPC 2.0"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "TrueNAS Community"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "websockets>=12.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "anyio[trio]>=4.0.0",
    "pytest-cov>=4.0.0",
]

[tool.ruff]
# Configure Ruff to use the maximum line length of 88 characters
line-length = 88
target-version = "py38"
# Exclude common non-code directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by black)
]

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | venv
  | build
  | dist
  | \.eggs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip_glob = [".venv/*", "venv/*"]
known_first_party = ["truenas_client", "truenas_cli"]
known_third_party = ["websockets", "dotenv"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enforce
ignore_missing_imports = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"

# Per-module options for gradual typing
[[tool.mypy.overrides]]
module = "websockets.*"
ignore_missing_imports = true

# Client library - Allow Any returns from async JSON-RPC calls
[[tool.mypy.overrides]]
module = "truenas_client.client"
disable_error_code = ["no-any-return"]

# CLI core utilities - Allow Any returns from config access
[[tool.mypy.overrides]]
module = "truenas_cli.core"
disable_error_code = ["no-any-return"]

# Base command class - Allow Any returns from argparse
[[tool.mypy.overrides]]
module = "truenas_cli.commands.base"
disable_error_code = ["no-any-return", "attr-defined"]

# Disk commands - Allow type mismatches in list comprehensions
[[tool.mypy.overrides]]
module = "truenas_cli.commands.disk"
disable_error_code = ["arg-type"]

# Dataset commands - Allow type mismatches in data extraction
[[tool.mypy.overrides]]
module = "truenas_cli.commands.dataset"
disable_error_code = ["var-annotated", "arg-type", "assignment", "misc"]

# CLI main - Allow argparse type issues
[[tool.mypy.overrides]]
module = "truenas_cli.cli"
disable_error_code = ["attr-defined"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--strict-markers -ra"
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "unit: marks tests as unit tests",
]
# Use anyio for async tests (as per CLAUDE.md guidelines)
# Tests should use @pytest.mark.anyio decorator
